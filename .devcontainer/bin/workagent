#!/bin/bash
# workagent - Simplified agent spawner for issue-based workflow
# One issue = One branch = One worktree = One agent

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Usage function
usage() {
    cat << EOF
Usage: workagent ISSUE_NUMBER [OPTIONS]

Prepare a git worktree and optionally spawn an AI agent to work on a GitHub issue.

Arguments:
  ISSUE_NUMBER    The GitHub issue number to work on

Options:
  --model MODEL   AI model to use (opus, sonnet, gemini, flash) [required unless --prepare-only]
  --prepare-only  Only set up the worktree, don't spawn an agent
  --no-auto-cmd   Spawn agent but don't run the initial /implement-issue command
  --help          Show this help message

Examples:
  # Prepare worktree and spawn agent with auto command
  workagent 123 --model opus

  # Only prepare the worktree
  workagent 123 --prepare-only

  # Spawn agent without auto command
  workagent 123 --model sonnet --no-auto-cmd

Cleanup:
  # When done, from the main worktree:
  git worktree remove ../tetraspore-issue-123
  git branch -d issue-123
EOF
}

# Parse arguments
ISSUE_NUMBER=""
MODEL=""
PREPARE_ONLY=false
NO_AUTO_CMD=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --model)
            MODEL="$2"
            shift 2
            ;;
        --prepare-only)
            PREPARE_ONLY=true
            shift
            ;;
        --no-auto-cmd)
            NO_AUTO_CMD=true
            shift
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            if [[ -z "$ISSUE_NUMBER" ]]; then
                ISSUE_NUMBER="$1"
            else
                echo -e "${RED}Error: Unexpected argument: $1${NC}"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate arguments
if [[ -z "$ISSUE_NUMBER" ]]; then
    echo -e "${RED}Error: Issue number is required${NC}"
    usage
    exit 1
fi

if [[ ! "$ISSUE_NUMBER" =~ ^[0-9]+$ ]]; then
    echo -e "${RED}Error: Issue number must be numeric${NC}"
    exit 1
fi

if [[ "$PREPARE_ONLY" == false && -z "$MODEL" ]]; then
    echo -e "${RED}Error: --model is required unless using --prepare-only${NC}"
    usage
    exit 1
fi

# Validate model if provided
if [[ -n "$MODEL" ]]; then
    case $MODEL in
        opus|sonnet|gemini|flash) ;;
        *)
            echo -e "${RED}Error: Invalid model: $MODEL${NC}"
            echo "Valid models: opus, sonnet, gemini, flash"
            exit 1
            ;;
    esac
fi

# Get repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || true)
if [[ -z "$REPO_ROOT" ]]; then
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
fi

# Check if we're in the main worktree
CURRENT_WORKTREE=$(git rev-parse --show-toplevel)
MAIN_WORKTREE=$(git worktree list | head -1 | awk '{print $1}')
if [[ "$CURRENT_WORKTREE" != "$MAIN_WORKTREE" ]]; then
    echo -e "${YELLOW}Warning: You should run this from the main worktree${NC}"
    echo "Current: $CURRENT_WORKTREE"
    echo "Main: $MAIN_WORKTREE"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Define branch and worktree names
BRANCH_NAME="issue-${ISSUE_NUMBER}"
WORKTREE_DIR="${REPO_ROOT}/../tetraspore-issue-${ISSUE_NUMBER}"

# Check if branch already exists
if git show-ref --verify --quiet "refs/heads/${BRANCH_NAME}"; then
    echo -e "${RED}Error: Branch '${BRANCH_NAME}' already exists${NC}"
    echo "If you want to continue work on this issue, just cd to the worktree and run the agent manually"
    exit 1
fi

# Check if worktree already exists
if [[ -d "$WORKTREE_DIR" ]]; then
    echo -e "${RED}Error: Worktree directory already exists: $WORKTREE_DIR${NC}"
    exit 1
fi

# Verify issue exists and is open
echo -e "${BLUE}Checking GitHub issue #${ISSUE_NUMBER}...${NC}"
ISSUE_STATE=$(gh issue view "$ISSUE_NUMBER" --json state -q .state 2>/dev/null || echo "error")
if [[ "$ISSUE_STATE" == "error" ]]; then
    echo -e "${RED}Error: Could not fetch issue #${ISSUE_NUMBER}${NC}"
    echo "Make sure the issue exists and you have access to it"
    exit 1
fi

if [[ "$ISSUE_STATE" != "OPEN" ]]; then
    echo -e "${YELLOW}Warning: Issue #${ISSUE_NUMBER} is ${ISSUE_STATE}${NC}"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Get issue title for display
ISSUE_TITLE=$(gh issue view "$ISSUE_NUMBER" --json title -q .title | head -1)
echo -e "${GREEN}Issue: ${ISSUE_TITLE}${NC}"

# Create branch and worktree
echo -e "${BLUE}Creating branch and worktree...${NC}"
git worktree add -b "$BRANCH_NAME" "$WORKTREE_DIR" main

# Copy environment files
echo -e "${BLUE}Setting up environment...${NC}"
cp "${REPO_ROOT}/.env" "${WORKTREE_DIR}/.env" 2>/dev/null || true
cp "${REPO_ROOT}/.env.example" "${WORKTREE_DIR}/.env.example" 2>/dev/null || true

# Create .env.local with unique ports
# Find the next available port set
USED_PORTS=$(find "${REPO_ROOT}/.." -name ".env.local" -type f 2>/dev/null | \
    xargs grep -h "VITE_DEV_PORT" 2>/dev/null | \
    sed 's/.*=//' | sort -n | tail -1 || echo "3000")

if [[ -z "$USED_PORTS" ]] || [[ "$USED_PORTS" == "3000" ]]; then
    BASE_PORT=3003
else
    BASE_PORT=$((USED_PORTS + 3))
fi

cat > "${WORKTREE_DIR}/.env.local" << EOF
# Worktree-specific port configuration for issue-${ISSUE_NUMBER}
VITE_DEV_PORT=${BASE_PORT}
VITE_PREVIEW_PORT=$((BASE_PORT + 1))
VITE_DEBUG_PORT=$((BASE_PORT + 2))
EOF

echo -e "${GREEN}✓ Worktree created at: ${WORKTREE_DIR}${NC}"
echo -e "${GREEN}✓ Ports allocated: ${BASE_PORT}-$((BASE_PORT + 2))${NC}"

# Install dependencies
echo -e "${BLUE}Installing dependencies...${NC}"
cd "$WORKTREE_DIR"
npm install

# Create initial commit
git add .env.local
git commit -m "chore: setup worktree for issue #${ISSUE_NUMBER}" || true

if [[ "$PREPARE_ONLY" == true ]]; then
    echo -e "${GREEN}✓ Worktree prepared successfully${NC}"
    echo
    echo "Next steps:"
    echo "  cd $WORKTREE_DIR"
    echo "  agent --model $MODEL"
    echo "  /implement-issue $ISSUE_NUMBER"
    exit 0
fi

# Spawn agent
echo -e "${BLUE}Spawning ${MODEL} agent...${NC}"

# Prepare the initial command if not disabled
INITIAL_CMD=""
if [[ "$NO_AUTO_CMD" == false ]]; then
    INITIAL_CMD="/implement-issue ${ISSUE_NUMBER}"
fi

# Map model names to full agent commands
case $MODEL in
    opus|sonnet)
        AGENT_CMD="claude"
        MODEL_FLAG="--model ${MODEL}"
        ;;
    gemini)
        AGENT_CMD="gemini"
        MODEL_FLAG="--model gemini-2.0-flash-exp"
        ;;
    flash)
        AGENT_CMD="gemini"
        MODEL_FLAG="--model gemini-2.0-flash-exp"
        ;;
esac

echo
echo -e "${GREEN}Starting agent in TUI mode...${NC}"
echo -e "${YELLOW}Issue #${ISSUE_NUMBER}: ${ISSUE_TITLE}${NC}"
echo
if [[ -n "$INITIAL_CMD" ]]; then
    echo -e "${BLUE}Initial command: ${INITIAL_CMD}${NC}"
    echo
fi

# Run the agent (this will take over the terminal)
if [[ -n "$INITIAL_CMD" ]]; then
    # Use echo to send the initial command
    echo "$INITIAL_CMD" | $AGENT_CMD $MODEL_FLAG
else
    $AGENT_CMD $MODEL_FLAG
fi