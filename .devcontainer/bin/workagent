#!/bin/bash
# workagent - Simplified agent spawner for issue-based workflow
# One issue = One branch = One worktree = One agent

# Note: We don't use set -e to allow graceful error handling

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Usage function
usage() {
    cat << EOF
Usage: workagent ISSUE_NUMBER [OPTIONS]

Prepare a git worktree and optionally spawn an AI agent to work on a GitHub issue.

Arguments:
  ISSUE_NUMBER    The GitHub issue number to work on

Options:
  --model MODEL   AI model to use (opus, sonnet, gemini, flash) [required unless --prepare-only]
  --prepare-only  Only set up the worktree, don't spawn an agent
  --help          Show this help message

Examples:
  # Prepare worktree and show agent command
  workagent 123 --model opus

  # Only prepare the worktree
  workagent 123 --prepare-only

Cleanup:
  # When done, from the main worktree:
  git worktree remove ../tetraspore-issue-123
  git branch -d issue-123
EOF
}

# Parse arguments
ISSUE_NUMBER=""
MODEL=""
PREPARE_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --model)
            MODEL="$2"
            shift 2
            ;;
        --prepare-only)
            PREPARE_ONLY=true
            shift
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            if [[ -z "$ISSUE_NUMBER" ]]; then
                ISSUE_NUMBER="$1"
            else
                echo -e "${RED}Error: Unexpected argument: $1${NC}"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate arguments
if [[ -z "$ISSUE_NUMBER" ]]; then
    echo -e "${RED}Error: Issue number is required${NC}"
    usage
    exit 1
fi

if [[ ! "$ISSUE_NUMBER" =~ ^[0-9]+$ ]]; then
    echo -e "${RED}Error: Issue number must be numeric${NC}"
    exit 1
fi

if [[ "$PREPARE_ONLY" == false && -z "$MODEL" ]]; then
    echo -e "${RED}Error: --model is required unless using --prepare-only${NC}"
    usage
    exit 1
fi

# Validate model if provided
if [[ -n "$MODEL" ]]; then
    case $MODEL in
        opus|sonnet|gemini|flash) ;;
        *)
            echo -e "${RED}Error: Invalid model: $MODEL${NC}"
            echo "Valid models: opus, sonnet, gemini, flash"
            exit 1
            ;;
    esac
fi

# Get repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || true)
if [[ -z "$REPO_ROOT" ]]; then
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
fi

# Check if we're in the main worktree
CURRENT_WORKTREE=$(git rev-parse --show-toplevel)
MAIN_WORKTREE=$(git worktree list | head -1 | awk '{print $1}')
if [[ "$CURRENT_WORKTREE" != "$MAIN_WORKTREE" ]]; then
    echo -e "${YELLOW}Warning: You should run this from the main worktree${NC}"
    echo "Current: $CURRENT_WORKTREE"
    echo "Main: $MAIN_WORKTREE"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Check for uncommitted changes
UNCOMMITTED_CHANGES=$(git status --porcelain)
if [[ -n "$UNCOMMITTED_CHANGES" ]]; then
    echo -e "${YELLOW}Warning: You have uncommitted changes in the current worktree:${NC}"
    git status --short
    echo
    echo -e "${YELLOW}These changes will NOT be included in the new worktree.${NC}"
    echo "Consider committing or stashing them first."
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Define branch and worktree names
BRANCH_NAME="issue-${ISSUE_NUMBER}"
WORKTREE_DIR="${REPO_ROOT}/../tetraspore-issue-${ISSUE_NUMBER}"

# Check if branch already exists
BRANCH_EXISTS=false
WORKTREE_EXISTS=false

if git show-ref --verify --quiet "refs/heads/${BRANCH_NAME}"; then
    BRANCH_EXISTS=true
fi

if [[ -d "$WORKTREE_DIR" ]]; then
    WORKTREE_EXISTS=true
fi

# Handle existing branch/worktree
if [[ "$BRANCH_EXISTS" == true ]] || [[ "$WORKTREE_EXISTS" == true ]]; then
    echo -e "${YELLOW}Warning: Resources already exist for issue #${ISSUE_NUMBER}:${NC}"
    [[ "$BRANCH_EXISTS" == true ]] && echo "  - Branch: ${BRANCH_NAME}"
    [[ "$WORKTREE_EXISTS" == true ]] && echo "  - Worktree: ${WORKTREE_DIR}"
    echo
    echo "Options:"
    echo "  1) Use existing worktree/branch and continue"
    echo "  2) Remove and recreate (DESTRUCTIVE - will lose uncommitted changes)"
    echo "  3) Exit"
    echo
    read -p "Choose option (1-3): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            echo -e "${BLUE}Using existing worktree/branch...${NC}"
            if [[ "$WORKTREE_EXISTS" == true ]]; then
                cd "$WORKTREE_DIR"
            else
                # Branch exists but worktree doesn't - create worktree
                echo -e "${BLUE}Creating worktree for existing branch...${NC}"
                git worktree add "$WORKTREE_DIR" "$BRANCH_NAME"
                cd "$WORKTREE_DIR"
            fi
            ;;
        2)
            echo -e "${YELLOW}Removing existing resources...${NC}"
            if [[ "$WORKTREE_EXISTS" == true ]]; then
                git worktree remove --force "$WORKTREE_DIR" 2>/dev/null || true
            fi
            if [[ "$BRANCH_EXISTS" == true ]]; then
                git branch -D "$BRANCH_NAME" 2>/dev/null || true
            fi
            echo -e "${GREEN}✓ Cleaned up existing resources${NC}"
            # Reset flags since we cleaned up
            BRANCH_EXISTS=false
            WORKTREE_EXISTS=false
            ;;
        *)
            echo -e "${BLUE}Exiting...${NC}"
            exit 0
            ;;
    esac
fi

# Verify issue exists and is open
echo -e "${BLUE}Checking GitHub issue #${ISSUE_NUMBER}...${NC}"
ISSUE_STATE=$(gh issue view "$ISSUE_NUMBER" --json state -q .state 2>/dev/null || echo "error")
if [[ "$ISSUE_STATE" == "error" ]]; then
    echo -e "${RED}Error: Could not fetch issue #${ISSUE_NUMBER}${NC}"
    echo "Make sure the issue exists and you have access to it"
    exit 1
fi

if [[ "$ISSUE_STATE" != "OPEN" ]]; then
    echo -e "${YELLOW}Warning: Issue #${ISSUE_NUMBER} is ${ISSUE_STATE}${NC}"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Get issue title for display
ISSUE_TITLE=$(gh issue view "$ISSUE_NUMBER" --json title -q .title | head -1)
echo -e "${GREEN}Issue: ${ISSUE_TITLE}${NC}"

# Create branch and worktree only if we're not reusing existing ones
if [[ "$BRANCH_EXISTS" == false ]] || [[ "$WORKTREE_EXISTS" == false ]]; then
    if [[ "$BRANCH_EXISTS" == false ]]; then
        echo -e "${BLUE}Creating branch and worktree...${NC}"
        git worktree add -b "$BRANCH_NAME" "$WORKTREE_DIR" main
    fi
fi

# Change to worktree directory
cd "$WORKTREE_DIR"

# Copy environment files (idempotent)
echo -e "${BLUE}Setting up environment...${NC}"
cp "${REPO_ROOT}/.env" "${WORKTREE_DIR}/.env" 2>/dev/null || true
cp "${REPO_ROOT}/.env.example" "${WORKTREE_DIR}/.env.example" 2>/dev/null || true

# Create or update .env.local with unique ports
# Check if .env.local already exists and has valid ports
if [[ -f "${WORKTREE_DIR}/.env.local" ]] && grep -q "VITE_DEV_PORT" "${WORKTREE_DIR}/.env.local"; then
    EXISTING_PORT=$(grep "VITE_DEV_PORT" "${WORKTREE_DIR}/.env.local" | sed 's/.*=//')
    echo -e "${GREEN}✓ Using existing port configuration: ${EXISTING_PORT}${NC}"
else
    # Find the next available port set
    USED_PORTS=$(find "${REPO_ROOT}/.." -name ".env.local" -type f 2>/dev/null | \
        xargs grep -h "VITE_DEV_PORT" 2>/dev/null | \
        sed 's/.*=//' | sort -n | tail -1 || echo "3000")

    if [[ -z "$USED_PORTS" ]] || [[ "$USED_PORTS" == "3000" ]]; then
        BASE_PORT=3003
    else
        BASE_PORT=$((USED_PORTS + 3))
    fi

    cat > "${WORKTREE_DIR}/.env.local" << EOF
# Worktree-specific port configuration for issue-${ISSUE_NUMBER}
VITE_DEV_PORT=${BASE_PORT}
VITE_PREVIEW_PORT=$((BASE_PORT + 1))
VITE_DEBUG_PORT=$((BASE_PORT + 2))
EOF

    echo -e "${GREEN}✓ Ports allocated: ${BASE_PORT}-$((BASE_PORT + 2))${NC}"
fi

echo -e "${GREEN}✓ Worktree at: ${WORKTREE_DIR}${NC}"

# Install dependencies (idempotent - npm install is already idempotent)
echo -e "${BLUE}Installing dependencies...${NC}"
if ! npm install; then
    echo -e "${YELLOW}Warning: npm install failed. Attempting to continue...${NC}"
    echo -e "${YELLOW}You may need to run 'npm install' manually later${NC}"
fi

if [[ "$PREPARE_ONLY" == true ]]; then
    echo -e "${GREEN}✓ Worktree prepared successfully${NC}"
    echo
    echo "Next steps:"
    echo "  cd $WORKTREE_DIR"
    echo "  agent --model $MODEL"
    echo "  /implement-issue $ISSUE_NUMBER"
    exit 0
fi

# Prepare the initial command
INITIAL_CMD="/implement-issue ${ISSUE_NUMBER}"

# Use the agent wrapper command which handles all models
AGENT_CMD="agent"
MODEL_FLAG="--model ${MODEL}"

# Display the command to run
echo
echo -e "${GREEN}✓ Worktree ready!${NC}"
echo
echo -e "${YELLOW}Issue #${ISSUE_NUMBER}: ${ISSUE_TITLE}${NC}"
echo
echo "Run this command to start the ${MODEL} agent:"
echo -e "${BLUE}cd $WORKTREE_DIR && $AGENT_CMD $MODEL_FLAG '$INITIAL_CMD'${NC}"
echo